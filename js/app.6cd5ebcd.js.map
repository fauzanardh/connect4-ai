{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils.js","webpack:///./src/App.vue?7e02","webpack:///./src/components/GameBoard.vue?03d0","webpack:///./src/components/GameScoreBoard.vue?f351","webpack:///./src/registerServiceWorker.js","webpack:///./src/App.vue?c8b5","webpack:///./src/components/GameContainer.vue?7f42","webpack:///./src/constants.js","webpack:///./src/components/GameBoard.vue?142f","webpack:///./src/components/GameColumns.vue?d18e","webpack:///./src/components/GameCheckers.vue?e665","webpack:///src/components/GameCheckers.vue","webpack:///./src/components/GameCheckers.vue?9486","webpack:///./src/components/GameCheckers.vue","webpack:///src/components/GameColumns.vue","webpack:///./src/components/GameColumns.vue?9764","webpack:///./src/components/GameColumns.vue","webpack:///src/components/GameBoard.vue","webpack:///./src/components/GameBoard.vue?d45c","webpack:///./src/components/GameBoard.vue","webpack:///./src/components/GameScoreBoard.vue?3e74","webpack:///src/components/GameScoreBoard.vue","webpack:///./src/components/GameScoreBoard.vue?75b5","webpack:///./src/components/GameScoreBoard.vue","webpack:///./src/AI/Position.js","webpack:///./src/AI/MoveSorter.js","webpack:///./src/AI/Solver.js","webpack:///src/components/GameContainer.vue","webpack:///./src/components/GameContainer.vue?ed8f","webpack:///./src/components/GameContainer.vue","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./src/components/GameColumns.vue?1f1f"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","range","num","Array","keys","row","col","cssUrl","id","makeTitle","text","toUpperCase","min","Math","max","wb","_vm","this","_h","$createElement","_c","_self","attrs","_m","gameContainerName","_b","tag","gameContainerProps","_v","staticClass","staticStyle","on","$event","setPlayer","staticRenderFns","_s","instruction","checkers","rowCount","colCount","status","drop","land","moves","winner","getCurrentPlayer","reset","AI","YOU","EMPTY","HEXES","ai","you","columns","PLAY","OVER","boardWidth","boardHeight","patternId","cellSize","radius","maskId","pattern","_l","colCheckers","columnsColor","mask","checker","class","color","opacity","enter","centerX","centerY","fillColor","props","minDuration","coefficient","computed","fromY","destY","isWinner","percentage","methods","duration","y","ease","onComplete","done","component","components","GameCheckers","nextEmptyRow","$emit","GameColumns","rows","cols","values","style","aiHex","messageOver","currentPlayerTurnString","youHex","winnerName","gameOver","currentPlayer","Position","width","height","nbMoves","minScore","maxScore","bottomMask","row_mask","boardMask","BigInt","current_pos","top_mask_col","pos2","assign","getPrototypeOf","JSON","parse","stringify","toString","assert","move","play","bottom_mask_col","column_mask","winning_position","possible","opponent_winning_position","canWinNext","possibleMask","opponentWin","forcedMoves","pop_count","compute_winning_position","pos","bitmask","x","MoveSorter","size","entries","fill","score","Solver","nodeCount","hashTable","Hashtable","columnExpOrder","ceil","alpha","beta","isWinningMove","val","opponentCanWinNext","isOpponentWinningMove","nextPossibleMove","possibleNonLosingMoves","add","moveScore","nextMove","getNext","bestMoveCol","clone","ret","negamax","newValue","put","weak","GameBoard","GameScoreBoard","isLocked","HEIGHT","WIDTH","firstPlayer","undefined","position","solver","isDraw","created","history","go","toggleColor","getChecker","setChecker","playCol","checkForWinFrom","displayDraw","displayWin","bestColumn","getForcedMove","getWinner","segment","every","checkHorizontalSegments","checkVerticalSegments","checkForwardSlashSegments","minRow","minCol","checkBackwardSlashSegments","maxRow","lastChecker","coords","forEach","resigned","GameContainer","player","isReady","prompt","$workbox","addEventListener","navigator","Workbox","process","location","reload","register","Vue","config","productionTip","render","h","App","$mount"],"mappings":"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","file":"js/app.6cd5ebcd.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = {\r\n    range: num => [...Array(num).keys()],\r\n    key: (row, col) => `${row}${col}`,\r\n    cssUrl: id => `url(#${id})`,\r\n    makeTitle: text => text[0].toUpperCase() + text.slice(1, text.length),\r\n    min: num => Math.max(num - 3, 0),\r\n    max: (num, max) => Math.min(num + 3, max)\r\n}\r\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameBoard.vue?vue&type=style&index=0&id=0ff31ab3&scoped=true&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameScoreBoard.vue?vue&type=style&index=0&id=afa54508&scoped=true&lang=css&\"","import { Workbox } from 'workbox-window';\r\nlet wb;\r\nif ('serviceWorker' in navigator) {\r\n  wb = new Workbox(`${process.env.BASE_URL}service-worker.js`);\r\n  wb.addEventListener('controlling', () => {\r\n    window.location.reload();\r\n  });\r\n  wb.register();\r\n} else {\r\n  wb = null;\r\n}\r\nexport default wb;\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_vm._m(0),(_vm.isReady)?_c('div',{attrs:{\"id\":\"game\"}},[_c(_vm.gameContainerName,_vm._b({tag:\"component\"},'component',_vm.gameContainerProps,false))],1):_c('div',[_c('h3',[_vm._v(\"Who gets the first turn?\")]),_c('button',{staticClass:\"btn\",staticStyle:{\"margin\":\"8px\"},attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setPlayer('ai')}}},[_vm._v(\"AI\")]),_c('button',{staticClass:\"btn\",staticStyle:{\"margin\":\"8px\"},attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setPlayer('you')}}},[_vm._v(\"You\")]),_c('br'),_c('br')]),_c('footer',[_vm._v(\" Connect 4 AI | Project for BINUS International Analysis of Algorithm class \")])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"logo\"},[_c('img',{attrs:{\"alt\":\"Connect 4 AI\",\"src\":\"img/logo.png\"}}),_c('h2',[_vm._v(\"Connect 4 AI\")])])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('p',[_vm._v(\" \"+_vm._s(_vm.instruction)+\" \")]),_c('GameBoard',{attrs:{\"checkers\":_vm.checkers,\"row-count\":_vm.rowCount,\"col-count\":_vm.colCount,\"status\":_vm.status},on:{\"drop\":_vm.drop,\"land\":_vm.land}}),_c('GameScoreBoard',{attrs:{\"moves\":_vm.moves,\"winner\":_vm.winner,\"current-player\":_vm.getCurrentPlayer,\"status\":_vm.status},on:{\"reset\":_vm.reset}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// Checkers\r\nexport const AI = 'ai';\r\nexport const YOU = 'you';\r\nexport const EMPTY = 'empty';\r\n\r\nexport const HEXES = {\r\n    ai: '#BB86FC',\r\n    you: '#03DAC5',\r\n    columns: '#332940',\r\n};\r\n\r\nexport const PLAY = 'play';\r\nexport const OVER = 'over';\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{staticClass:\"game-board\",attrs:{\"viewBox\":(\"0 0 \" + _vm.boardWidth + \" \" + _vm.boardHeight),\"xmlns\":\"http://www.w3.org/2000/svg\"}},[_c('defs',[_c('pattern',{attrs:{\"id\":_vm.patternId,\"patternUnits\":\"userSpaceOnUse\",\"width\":_vm.cellSize,\"height\":_vm.cellSize}},[_c('circle',{attrs:{\"cx\":_vm.cellSize / 2,\"cy\":_vm.cellSize / 2,\"r\":_vm.radius,\"fill\":\"black\"}})]),_c('mask',{attrs:{\"id\":_vm.maskId}},[_c('rect',{attrs:{\"width\":_vm.cellSize,\"height\":_vm.boardHeight,\"fill\":\"white\"}}),_c('rect',{attrs:{\"width\":_vm.cellSize,\"height\":_vm.boardHeight,\"fill\":_vm.pattern}})])]),_vm._l((_vm.cols),function(col){return _c('GameColumns',{key:col,attrs:{\"checkers\":_vm.colCheckers(col),\"col\":col,\"color\":_vm.columnsColor,\"cell-size\":_vm.cellSize,\"radius\":_vm.radius,\"board-height\":_vm.boardHeight,\"row-count\":_vm.rowCount,\"mask\":_vm.mask,\"status\":_vm.status},on:{\"drop\":_vm.drop,\"land\":_vm.land}})})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{attrs:{\"x\":_vm.col * _vm.cellSize,\"y\":\"0\"}},[_c('g',{staticClass:\"column\",on:{\"click\":function($event){return _vm.drop(_vm.col)}}},[_vm._l((_vm.checkers),function(checker){return _c('GameCheckers',{key:_vm.key(checker),attrs:{\"checker\":checker,\"cell-size\":_vm.cellSize,\"rowCount\":_vm.rowCount,\"radius\":_vm.radius,\"status\":_vm.status},on:{\"land\":_vm.land}})}),_c('rect',{key:_vm.col,class:_vm.status,attrs:{\"col\":_vm.col,\"width\":_vm.cellSize,\"height\":_vm.boardHeight,\"fill\":_vm.color,\"fill-opacity\":_vm.opacity,\"mask\":_vm.mask}})],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{\"css\":false,\"appear\":\"\"},on:{\"enter\":_vm.enter}},[_c('circle',{attrs:{\"cx\":_vm.centerX,\"cy\":_vm.centerY,\"r\":_vm.radius,\"fill\":_vm.fillColor,\"fill-opacity\":_vm.opacity}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <transition\r\n    :css=\"false\"\r\n    @enter=\"enter\"\r\n    appear\r\n  >\r\n    <circle\r\n      :cx=\"centerX\"\r\n      :cy=\"centerY\"\r\n      :r=\"radius\"\r\n      :fill=\"fillColor\"\r\n      :fill-opacity=\"opacity\"\r\n    />\r\n  </transition>\r\n</template>\r\n\r\n<script>\r\nimport {TweenMax, Bounce} from 'gsap';\r\n\r\nimport {OVER, HEXES} from '@/constants';\r\n\r\nexport default {\r\n  name: \"GameCheckers\",\r\n  props: ['checker', 'cellSize', 'rowCount', 'radius', 'status'],\r\n\r\n  data() {\r\n    return {\r\n      minDuration: 0.2,\r\n      coefficient: 0.4,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    row() {\r\n      return this.checker.row;\r\n    },\r\n    col() {\r\n      return this.checker.col;\r\n    },\r\n    centerX() {\r\n      return this.cellSize / 2;\r\n    },\r\n    centerY() {\r\n      return this.cellSize / 2 + this.cellSize * (this.rowCount - 1 - this.row);\r\n    },\r\n    fromY() {\r\n      return -1 * (this.centerY + this.cellSize);\r\n    },\r\n    destY() {\r\n      return 0;\r\n    },\r\n    isWinner() {\r\n      return this.checker.isWinner;\r\n    },\r\n    color() {\r\n      return this.checker.color;\r\n    },\r\n    fillColor() {\r\n      return HEXES[this.color];\r\n    },\r\n    opacity() {\r\n      return this.status === OVER && !this.isWinner ? 0.3 : 1.0;\r\n    },\r\n    percentage() {\r\n      return (this.rowCount - this.row) / this.rowCount;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    duration() {\r\n      const {minDuration, coefficient, rowCount, row} = this;\r\n      const percentage = (rowCount - row) / rowCount;\r\n      return minDuration + coefficient * percentage;\r\n    },\r\n\r\n    enter(el, done) {\r\n      const fromY = -1 * (this.centerY + this.cellSize);\r\n      const destY = 0;\r\n      const fromParams = {\r\n        y: fromY,\r\n      };\r\n      const destParams = {\r\n        y: destY,\r\n        ease: Bounce.easeOut,\r\n        onComplete: () => {\r\n          this.$emit('land');\r\n          done();\r\n        },\r\n      };\r\n      return TweenMax.fromTo(el, this.duration(), fromParams, destParams);\r\n    },\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameCheckers.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameCheckers.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GameCheckers.vue?vue&type=template&id=f585d4f8&\"\nimport script from \"./GameCheckers.vue?vue&type=script&lang=js&\"\nexport * from \"./GameCheckers.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <svg :x=\"col * cellSize\" y=\"0\">\r\n    <g @click=\"drop(col)\" class=\"column\">\r\n      <GameCheckers\r\n        v-for=\"checker in checkers\"\r\n        :key=\"key(checker)\"\r\n        :checker=\"checker\"\r\n        :cell-size=\"cellSize\"\r\n        :rowCount=\"rowCount\"\r\n        :radius=\"radius\"\r\n        :status=\"status\"\r\n        @land=\"land\"\r\n      />\r\n      <rect\r\n        :class=\"status\"\r\n        :key=\"col\"\r\n        :col=\"col\"\r\n        :width=\"cellSize\"\r\n        :height=\"boardHeight\"\r\n        :fill=\"color\"\r\n        :fill-opacity=\"opacity\"\r\n        :mask=\"mask\"\r\n      />\r\n    </g>\r\n  </svg>\r\n</template>\r\n\r\n<script>\r\nimport {OVER} from '@/constants';\r\nimport GameCheckers from \"@/components/GameCheckers\";\r\nexport default {\r\n  name: \"GameColumns\",\r\n  components: {\r\n    GameCheckers,\r\n  },\r\n\r\n  props: ['checkers', 'col', 'color', 'cellSize', 'boardHeight', 'radius', 'rowCount', 'mask', 'status'],\r\n\r\n  computed: {\r\n    // Finding the next open empty row\r\n    nextEmptyRow() {\r\n      return Math.max(...this.checkers.map(c => c.row).concat(-1)) + 1;\r\n    },\r\n    opacity() {\r\n      return this.status === OVER ? 0.25 : 1.0;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    key({row, col}) {\r\n      return `${row}${col}`;\r\n    },\r\n    land() {\r\n      this.$emit('land');\r\n    },\r\n    drop(col) {\r\n      const row = this.nextEmptyRow;\r\n      if (row < this.rowCount) {\r\n        this.$emit('drop', {row, col});\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.column {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameColumns.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameColumns.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GameColumns.vue?vue&type=template&id=baae8a6a&scoped=true&\"\nimport script from \"./GameColumns.vue?vue&type=script&lang=js&\"\nexport * from \"./GameColumns.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GameColumns.vue?vue&type=style&index=0&id=baae8a6a&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"baae8a6a\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n <svg\r\n  :viewBox=\"`0 0 ${boardWidth} ${boardHeight}`\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  class=\"game-board\"\r\n >\r\n  <defs>\r\n    <pattern :id=\"patternId\" patternUnits=\"userSpaceOnUse\" :width=\"cellSize\" :height=\"cellSize\">\r\n      <circle :cx=\"cellSize / 2\" :cy=\"cellSize / 2\" :r=\"radius\" fill=\"black\"/>\r\n    </pattern>\r\n   <mask :id=\"maskId\">\r\n     <rect :width=\"cellSize\" :height=\"boardHeight\" fill=\"white\"/>\r\n     <rect :width=\"cellSize\" :height=\"boardHeight\" :fill=\"pattern\"/>\r\n   </mask>\r\n  </defs>\r\n   <GameColumns\r\n     v-for=\"col in cols\"\r\n     :key=\"col\"\r\n     :checkers=\"colCheckers(col)\"\r\n     :col=\"col\"\r\n     :color=\"columnsColor\"\r\n     :cell-size=\"cellSize\"\r\n     :radius=\"radius\"\r\n     :board-height=\"boardHeight\"\r\n     :row-count=\"rowCount\"\r\n     :mask=\"mask\"\r\n     :status=\"status\"\r\n     @drop=\"drop\"\r\n     @land=\"land\"\r\n   />\r\n </svg>\r\n</template>\r\n\r\n<script>\r\nimport {cssUrl, range} from \"@/utils\";\r\nimport GameColumns from \"@/components/GameColumns\";\r\nimport {HEXES} from \"@/constants\";\r\n\r\nexport default {\r\n  components: {\r\n    GameColumns\r\n  },\r\n  name: \"GameBoard\",\r\n  props: ['checkers', 'rowCount', 'colCount', 'status'],\r\n\r\n  data() {\r\n    return {\r\n      patternId: 'cell-pattern',\r\n      maskId: 'cell-mask',\r\n      cellSize: 100,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    pattern() {\r\n      return cssUrl(this.patternId);\r\n    },\r\n    mask() {\r\n      return cssUrl(this.maskId);\r\n    },\r\n    rows() {\r\n      return range(this.rowCount);\r\n    },\r\n    cols() {\r\n      return range(this.colCount);\r\n    },\r\n    boardWidth() {\r\n      return this.colCount * this.cellSize;\r\n    },\r\n    boardHeight() {\r\n      return this.rowCount * this.cellSize;\r\n    },\r\n    radius() {\r\n      return this.cellSize * 0.45;\r\n    },\r\n    columnsColor() {\r\n      return HEXES.columns;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    colCheckers(col) {\r\n      return Object.values(this.checkers)\r\n      .filter(c => c.col === col)\r\n      .sort((a, b) => a.row - b.row);\r\n    },\r\n    drop(data) {\r\n      this.$emit('drop', data);\r\n    },\r\n    land() {\r\n      this.$emit('land');\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.game-board {\r\n  border: 5px #473E53 solid;\r\n  margin: 0 auto;\r\n  width: 80%;\r\n  max-width: 420px;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameBoard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameBoard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GameBoard.vue?vue&type=template&id=0ff31ab3&scoped=true&\"\nimport script from \"./GameBoard.vue?vue&type=script&lang=js&\"\nexport * from \"./GameBoard.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GameBoard.vue?vue&type=style&index=0&id=0ff31ab3&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0ff31ab3\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"score-board\"},[_c('div',{staticClass:\"p1 cell\"},[_c('p',{style:({color:_vm.aiHex})},[_vm._v(\"AI\")])]),_c('div',{staticClass:\"status cell\"},[(_vm.gameOver)?_c('p',[_vm._v(\" \"+_vm._s(_vm.messageOver)+\" \"),_c('a',{staticClass:\"play\",attrs:{\"href\":\"#app\"},on:{\"click\":_vm.reset}},[_vm._v(\"Play Again\")])]):_c('p',[_vm._v(\" \"+_vm._s(_vm.currentPlayerTurnString)+\" \")])]),_c('div',{staticClass:\"p2 cell\"},[_c('p',{style:({color:_vm.youHex})},[_vm._v(\"You\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"score-board\">\r\n    <div class=\"p1 cell\">\r\n      <p :style=\"{color:aiHex}\">AI</p>\r\n    </div>\r\n    <div class=\"status cell\">\r\n      <p v-if=\"gameOver\">\r\n        {{ messageOver }}\r\n        <a class=\"play\" href=\"#app\" @click=\"reset\">Play Again</a>\r\n      </p>\r\n      <p v-else>\r\n        {{ currentPlayerTurnString }}\r\n      </p>\r\n    </div>\r\n    <div class=\"p2 cell\">\r\n      <p :style=\"{color:youHex}\">You</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {HEXES, YOU, OVER} from '@/constants';\r\nimport {makeTitle} from \"@/utils\";\r\n\r\nexport default {\r\n  name: \"GameScoreBoard\",\r\n  props: ['winner', 'moves', 'currentPlayer', 'status'],\r\n\r\n  computed: {\r\n    aiHex() {\r\n      return HEXES.ai;\r\n    },\r\n    youHex() {\r\n      return HEXES.you;\r\n    },\r\n    winnerName() {\r\n      return this.winner && makeTitle(this.winner.color);\r\n    },\r\n    gameOver() {\r\n      return this.status === OVER;\r\n    },\r\n    messageOver() {\r\n      if (this.winner) {\r\n        return `${makeTitle(this.winner.color)} wins!`;\r\n      }\r\n      return 'It\\'s a draw!';\r\n    },\r\n    currentPlayerTurnString() {\r\n      if (this.currentPlayer === YOU) {\r\n        return 'Your turn.';\r\n      } else {\r\n        return 'AI\\'s turn';\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    reset() {\r\n      this.$emit('reset');\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.play {\r\n  color: #CF6679;\r\n}\r\n.score-board {\r\n  width: 240px;\r\n  display: grid;\r\n  grid-template-columns: [p1] 25% [status] 50% [p2] 25%;\r\n  margin: 0 auto;\r\n  padding: 1em 0;\r\n  font-weight: bold;\r\n}\r\n.score-board .status {\r\n  font-weight: normal;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameScoreBoard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameScoreBoard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GameScoreBoard.vue?vue&type=template&id=afa54508&scoped=true&\"\nimport script from \"./GameScoreBoard.vue?vue&type=script&lang=js&\"\nexport * from \"./GameScoreBoard.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GameScoreBoard.vue?vue&type=style&index=0&id=afa54508&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"afa54508\",\n  null\n  \n)\n\nexport default component.exports","import assert from \"assert\";\r\n\r\nclass Position {\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.nbMoves = 0;\r\n        this.mask = 0n;\r\n\r\n        // These variables are going to be hardcoded for now\r\n        // this.bottomMask = 4432676798593n;\r\n        // this.boardMask = 279258638311359n;\r\n        // this.minScore = -18;\r\n        // this.maxScore = 18.5;\r\n        this.minScore = -(width * height) / 2 + 3;\r\n        this.maxScore = (width * height + 1) / 2 - 3;\r\n        this.bottomMask = this.row_mask(0);\r\n        // eslint-disable-next-line no-undef\r\n        this.boardMask = this.bottomMask * ((1n << BigInt(height)) - 1n);\r\n        this.current_pos = 0n;\r\n    }\r\n\r\n    /* \"Public\" Functions */\r\n\r\n    // Check if the column is playable\r\n    // by doing AND operation on the top bit of the column\r\n    isPlayable(col) {\r\n        return (this.mask & this.top_mask_col(col)) === 0n;\r\n    }\r\n\r\n    clone() {\r\n        // Cloning the position class so it\r\n        // doesn't interfere with the original one\r\n        // *Hacky but it works*\r\n        const pos2 = Object.assign(\r\n            Object.create(Object.getPrototypeOf(this)),\r\n            JSON.parse(JSON.stringify(this, (key, value) =>\r\n                typeof value === 'bigint' ? value.toString() : value))\r\n        );\r\n        // Restoring the vars back to bigint datatype\r\n        /* eslint-disable */\r\n        pos2.current_pos = BigInt(pos2.current_pos);\r\n        pos2.mask = BigInt(pos2.mask);\r\n        pos2.bottomMask = BigInt(pos2.bottomMask);\r\n        pos2.boardMask = BigInt(pos2.boardMask);\r\n        assert(pos2.current_pos === this.current_pos);\r\n        assert(pos2.mask === this.mask);\r\n        assert(pos2.bottomMask === this.bottomMask);\r\n        assert(pos2.boardMask === this.boardMask);\r\n        /* eslint-enable */\r\n        return pos2;\r\n    }\r\n\r\n    // Simulating 'playing' the checkers\r\n    // in the solver with the desired move bit\r\n    play(move) {\r\n        // XOR-ing the current position with the mask\r\n        // to get either the player's checkers or the opponent's checkers\r\n        this.current_pos ^= this.mask;\r\n        // Adding the currently played checker to the mask\r\n        this.mask |= move;\r\n        this.nbMoves++;\r\n    }\r\n\r\n    // Simulating 'playing' the checkers\r\n    // in the solver on the corresponding column\r\n    playCol(col) {\r\n        this.play((this.mask + this.bottom_mask_col(col)) & this.column_mask(col));\r\n    }\r\n\r\n    // NOT USED\r\n    // Checking if the current node is a terminal node\r\n    // isTerminalNode() {\r\n    //     return this.hasWon() || this.opponentHasWon() || (this.possible() === 0n || this.canWinNext() || this.opponentCanWinNext());\r\n    // }\r\n    // isTerminalNode() {\r\n    //     return (this.possible() === 0n) || this.canWinNext() || this.opponentCanWinNext();\r\n    // }\r\n\r\n    // NOT USED\r\n    // Count the total amount of piece (checkers)\r\n    // that the player have\r\n    // countTotalPiece() {\r\n    //     return this.pop_count(this.current_pos);\r\n    // }\r\n\r\n    // Check if the player can win next turn\r\n    canWinNext() {\r\n        return this.winning_position() & this.possible();\r\n    }\r\n\r\n    // NOT USED\r\n    // Check if the player had already won\r\n    // hasWon() {\r\n    //     return this.alignment(this.current_pos);\r\n    // }\r\n\r\n    // NOT USED\r\n    // Count the total amount of piece (checkers)\r\n    // that the opponent have\r\n    // countOpponentTotalPiece() {\r\n    //     return this.pop_count(this.current_pos ^ this.mask);\r\n    // }\r\n\r\n    // Check if the opponent can win next turn\r\n    opponentCanWinNext() {\r\n        return this.opponent_winning_position() & this.possible();\r\n    }\r\n\r\n    // NOT USED\r\n    // Check if the opponent had already won\r\n    // opponentHasWon() {\r\n    //     return this.alignment(this.current_pos ^ this.mask);\r\n    // }\r\n\r\n    // Getting all possible moves\r\n    possible() {\r\n        return (this.mask + this.bottomMask) & this.boardMask;\r\n    }\r\n\r\n    // Compute all possible moves that doesn't lose in one turn\r\n    possibleNonLosingMoves() {\r\n        assert(!this.canWinNext());\r\n        let possibleMask = this.possible();\r\n        const opponentWin = this.opponent_winning_position();\r\n        // const opponentCheckers = this.current_pos ^ this.mask;\r\n        let forcedMoves = possibleMask & opponentWin;\r\n        // /* eslint-disable */\r\n        // for (let x = 0; x < this.width - 2; x++) {\r\n        //     // eslint-disable-next-line no-undef\r\n        //     if (\r\n        //         (((this.column_mask(x) & possibleMask) << (BigInt(this.height) + 1n)) & (this.current_pos ^ this.mask)) !== 0n &&\r\n        //         (((this.column_mask(x) & possibleMask) << (BigInt(this.height) + 1n)) & (2n * BigInt(this.current_pos ^ this.mask))) !== 0n\r\n        //     ) {\r\n        //         forcedMoves = possibleMask & this.column_mask(x);\r\n        //     }\r\n        // }\r\n        // /* eslint-enable */\r\n        // if (forcedMoves) {\r\n        //     if ((forcedMoves & (forcedMoves - 1n)) === 0n)\r\n        //         return 0n;\r\n        //     else\r\n        //         possibleMask = forcedMoves;\r\n        // }\r\n        if (forcedMoves) {\r\n            if ((forcedMoves & (forcedMoves - 1n)) !== 0n)\r\n                return 0n;\r\n            else\r\n                possibleMask = forcedMoves;\r\n        }\r\n        return possibleMask & ~(opponentWin >> 1n);\r\n    }\r\n\r\n    // NOT USED\r\n    // Calculate the current window score\r\n    // calculateWindowScore(window, mask) {\r\n    //     let score = 0n;\r\n    //     // Getting player, opponent, and empty(empty is considered as a piece) piece count\r\n    //     const playerCount = this.pop_count(window & this.current_pos);\r\n    //     const opponentCount = this.pop_count(window & (this.current_pos ^ this.mask));\r\n    //     const emptyCount = this.pop_count(mask & ~window);\r\n    //\r\n    //     // Game score heuristics\r\n    //     if (playerCount === 4n)\r\n    //         score += 100n;\r\n    //     else if (playerCount === 3n && emptyCount === 1n)\r\n    //         score += 5n;\r\n    //     else if (playerCount === 2n && emptyCount === 2n)\r\n    //         score += 2n;\r\n    //     if (opponentCount === 3n && emptyCount === 1n)\r\n    //         score -= 4n;\r\n    //     return score;\r\n    // }\r\n\r\n    // NOT USED\r\n    // calculateScore() {\r\n    //     let score = 0n;\r\n    //\r\n    //     // Center column\r\n    //     // Getting the center column bitmask\r\n    //     const centerMask = this.column_mask(Math.floor(this.width / 2));\r\n    //     // Counting the total number of checkers inside the center column\r\n    //     const centerCount = this.pop_count(centerMask & (this.current_pos ^ this.mask));\r\n    //     score += centerCount * 3n;\r\n    //\r\n    //     // Vertical\r\n    //     for (let i = 0; i < this.width; i++) {\r\n    //         // Dividing the rows into group of 4\r\n    //         // and calculating the score of that group\r\n    //         for (let j = 0; j < this.height - 3; j++) {\r\n    //             const colMask = this.column_mask(i) & this.slice_col(i, j, j + 4);\r\n    //             const window = colMask & this.mask;\r\n    //             score += this.calculateWindowScore(window, colMask);\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // Horizontal\r\n    //     for (let i = 0; i < this.height; i++) {\r\n    //         // Dividing the rows into group of 4\r\n    //         // and calculating the score of that group\r\n    //         for (let j = 0; j < this.width - 3; j++) {\r\n    //             const rowMask = this.row_mask(i) & this.slice_row(i, j, j + 4);\r\n    //             const window = rowMask & this.mask;\r\n    //             score += this.calculateWindowScore(window, rowMask);\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // Diagonal 1\r\n    //     // Diagonal 2\r\n    //\r\n    //     return Number(score);\r\n    // }\r\n\r\n    moveScore(move) {\r\n        return this.pop_count(this.compute_winning_position(this.current_pos | move, this.mask));\r\n    }\r\n\r\n    // Checking if this move is guaranteed win\r\n    isWinningMove(col) {\r\n        return this.winning_position() & this.possible() & this.column_mask(col);\r\n    }\r\n\r\n    // Checking if this move is guaranteed win for the opponent\r\n    isOpponentWinningMove(col) {\r\n        return this.opponent_winning_position() & this.possible() & this.column_mask(col);\r\n    }\r\n\r\n    // Used for getting the value out of hash table\r\n    key() {\r\n        return this.current_pos + this.mask;\r\n    }\r\n\r\n    /* \"Private\" Functions */\r\n\r\n    // Counts the number of bit set to one in a 64bits integer\r\n    pop_count(m) {\r\n        let c;\r\n        for (c = 0n; m; c++) m &= m - 1n;\r\n        // eslint-disable-next-line no-undef\r\n        return c;\r\n    }\r\n\r\n    // NOT USED\r\n    // Generate bitmask for the bottom part of each columns\r\n    // bottom(width, height) {\r\n    //     let btm = 0n;\r\n    //     for (let x = 0; x < width; x++) {\r\n    //         // eslint-disable-next-line no-undef\r\n    //         btm |= 1n << BigInt(x * (height + 1));\r\n    //     }\r\n    //     return btm;\r\n    // }\r\n\r\n    // Compute winning position for the current player\r\n    winning_position() {\r\n        return this.compute_winning_position(this.current_pos, this.mask);\r\n    }\r\n\r\n    // Compute winning position for the opponent by xor-ing the current player with the mask\r\n    opponent_winning_position() {\r\n        return this.compute_winning_position(this.current_pos ^ this.mask, this.mask);\r\n    }\r\n\r\n    // Computing all of the winning position\r\n    compute_winning_position(pos, mask) {\r\n        /* eslint-disable */\r\n\r\n        // Vertical\r\n        let r = (pos << 1n) & (pos << 2n) & (pos << 3n);\r\n\r\n        // Horizontal\r\n        let p = (pos << BigInt((this.height + 1))) & (pos << BigInt(2 * (this.height + 1)));\r\n        r |= p & (pos << BigInt(3 * (this.height + 1)));\r\n        r |= p & (pos >> BigInt((this.height + 1)));\r\n        p = (pos >> BigInt((this.height + 1))) & (pos >> BigInt(2 * (this.height + 1)));\r\n        r |= p & (pos << BigInt((this.height + 1)));\r\n        r |= p & (pos >> BigInt(3 * (this.height + 1)));\r\n\r\n        // Diagonal 1\r\n        p = (pos << BigInt(this.height)) & (pos << BigInt(2 * this.height));\r\n        r |= p & (pos << BigInt(3 * this.height));\r\n        r |= p & (pos >> BigInt(this.height));\r\n        p = (pos >> BigInt(this.height)) & (pos >> BigInt(2 * this.height));\r\n        r |= p & (pos << BigInt(this.height));\r\n        r |= p & (pos >> BigInt(3 * this.height));\r\n\r\n        // Diagonal 2\r\n        p = (pos << BigInt(this.height + 2)) & (pos << BigInt(2 * (this.height + 2)));\r\n        r |= p & (pos << BigInt(3 * (this.height + 2)));\r\n        r |= p & (pos >> BigInt(this.height + 2));\r\n        p = (pos >> BigInt(this.height + 2)) & (pos >> BigInt(2 * (this.height + 2)));\r\n        r |= p & (pos << BigInt(this.height + 2));\r\n        r |= p & (pos >> BigInt(3 * (this.height + 2)));\r\n\r\n        /* eslint-enable */\r\n        return r & (this.boardMask ^ mask);\r\n    }\r\n\r\n    // NOT USED\r\n    // Check if player has won the game\r\n    // alignment(pos) {\r\n    //     /* eslint-disable */\r\n    //\r\n    //     // Vertical\r\n    //     let m = pos & (pos >> 1n);\r\n    //     if (m & (m >> 2n)) return true;\r\n    //\r\n    //     // Horizontal\r\n    //     m = pos & (pos >> BigInt(this.height));\r\n    //     if (m & (m >> BigInt(2 * this.height))) return true;\r\n    //\r\n    //     // Diagonal 1\r\n    //     m = pos & (pos >> BigInt(this.height - 1));\r\n    //     if (m & (m >> BigInt(2 * (this.height - 1)))) return true;\r\n    //\r\n    //     // Diagonal 2\r\n    //     m = pos & (pos >> BigInt(this.height + 1));\r\n    //     if (m & (m >> BigInt(2 * (this.height + 1)))) return true;\r\n    //\r\n    //     /* eslint-enable */\r\n    //\r\n    //     // haven't win yet\r\n    //     return false;\r\n    // }\r\n\r\n    // NOT USED\r\n    // Create a bitmask for slicing a row\r\n    // slice_row(row, start, end) {\r\n    //     let sliceMask = 0n\r\n    //     if (typeof row === 'bigint') {\r\n    //         for (let x = start; x < end; x++) {\r\n    //             // eslint-disable-next-line no-undef\r\n    //             sliceMask |= 1n << (BigInt(x * this.height + 1) + row);\r\n    //         }\r\n    //     } else {\r\n    //         for (let x = start; x < end; x++) {\r\n    //             // eslint-disable-next-line no-undef\r\n    //             sliceMask |= 1n << BigInt(x * (this.height + 1) + row);\r\n    //         }\r\n    //     }\r\n    //     return sliceMask;\r\n    // }\r\n\r\n    // NOT USED\r\n    // Create a row that already been sliced\r\n    // sliced_row_mask(row, start, end) {\r\n    //     return this.row_mask(row) & this.slice_row(row, start, end);\r\n    // }\r\n\r\n    // NOT USED\r\n    // Create a bitmask for slicing a column\r\n    // slice_col(col, start, end) {\r\n    //     let sliceMask = 0n\r\n    //     if (typeof col === 'bigint') {\r\n    //         for (let x = start; x < end; x++) {\r\n    //             // eslint-disable-next-line no-undef\r\n    //             sliceMask |= (1n << BigInt(x)) << (col * BigInt(this.height + 1));\r\n    //         }\r\n    //     } else {\r\n    //         for (let x = start; x < end; x++) {\r\n    //             // eslint-disable-next-line no-undef\r\n    //             sliceMask |= (1n << BigInt(x)) << BigInt(col * (this.height + 1));\r\n    //         }\r\n    //     }\r\n    //     return sliceMask;\r\n    // }\r\n\r\n    // NOT USED\r\n    // Create a col that already been sliced\r\n    // sliced_col_mask(col, start, end) {\r\n    //     return this.column_mask(col) & this.slice_col(col, start, end);\r\n    // }\r\n\r\n    // NOT USED\r\n    // top_most_mask() {\r\n    //     let bitmask = 0n;\r\n    //     for (let x = 0; x < this.width; x++)\r\n    //         // eslint-disable-next-line no-undef\r\n    //         bitmask |= (1n << BigInt(this.height)) << BigInt(x * (this.height + 1));\r\n    //     return bitmask;\r\n    // }\r\n\r\n    // Getting the top bit for the specified column\r\n    top_mask_col(col) {\r\n        if (typeof col === 'bigint')\r\n            // eslint-disable-next-line no-undef\r\n            return (1n << BigInt(this.height - 1)) << (col * BigInt(this.height + 1));\r\n        else\r\n            // eslint-disable-next-line no-undef\r\n            return (1n << BigInt(this.height - 1)) << BigInt(col * (this.height + 1));\r\n    }\r\n\r\n    // Getting the bottom bit for the specified column\r\n    bottom_mask_col(col) {\r\n        if (typeof col === 'bigint')\r\n            // eslint-disable-next-line no-undef\r\n            return 1n << (col * BigInt(this.height + 1));\r\n        else\r\n            // eslint-disable-next-line no-undef\r\n            return 1n << BigInt(col * (this.height + 1));\r\n    }\r\n\r\n    // NOT USED\r\n    // Getting the columns' bit for the specified row\r\n    row_mask(row) {\r\n        if (typeof row === 'bigint') {\r\n            let bitmask = 0n;\r\n            for (let x = 0; x < this.width; x++)\r\n                // eslint-disable-next-line no-undef\r\n                bitmask |= 1n << (BigInt(x * (this.height + 1)) + row);\r\n            return bitmask;\r\n        } else {\r\n            let bitmask = 0n;\r\n            for (let x = 0; x < this.width; x++)\r\n                // eslint-disable-next-line no-undef\r\n                bitmask |= 1n << BigInt(x * (this.height + 1) + row);\r\n            return bitmask;\r\n        }\r\n    }\r\n\r\n    // Getting the entire column's bit for the specified column\r\n    column_mask(col) {\r\n        if (typeof col === 'bigint')\r\n            // eslint-disable-next-line no-undef\r\n            return ((1n << BigInt(this.height)) - 1n) << (col * BigInt(this.height + 1));\r\n        else\r\n\r\n            // eslint-disable-next-line no-undef\r\n            return ((1n << BigInt(this.height)) - 1n) << BigInt(col * (this.height + 1));\r\n    }\r\n}\r\n\r\nexport default Position;\r\n","class MoveSorter {\r\n    constructor(width) {\r\n        this.width = width\r\n        this.size = 0;\r\n        this.entries = new Array(width).fill({move: 0n, score: 0, col: 0});\r\n    }\r\n\r\n    // Add a move to the container with its score\r\n    add(move, score, col) {\r\n        let pos = this.size++;\r\n        for (; pos && this.entries[pos-1].score > score; --pos)\r\n            this.entries[pos] = this.entries[pos-1];\r\n        this.entries[pos].move = move;\r\n        this.entries[pos].score = score;\r\n        this.entries[pos].col = col;\r\n    }\r\n\r\n    // Get the next move\r\n    getNext() {\r\n        if (this.size)\r\n            return this.entries[--this.size];\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // Resets the move sorter\r\n    reset() {\r\n        this.entries = new Array(this.width).fill({move: 0n, score: 0, col: 0});\r\n        this.size = 0\r\n    }\r\n}\r\n\r\nexport default MoveSorter;\r\n","import assert from \"assert\";\r\nimport Hashtable from 'jshashtable';\r\nimport MoveSorter from \"@/AI/MoveSorter\";\r\n\r\nclass Solver {\r\n    constructor(width) {\r\n        this.nodeCount = 0;\r\n        this.width = width;\r\n        this.hashTable = new Hashtable();\r\n        this.columnExpOrder = new Array(width).fill(0);\r\n        // Initializing the column exploration order\r\n        for (let x = 0; x < width; x++)\r\n            // start with the center column\r\n            // ex for 7 column [ 3, 2, 4, 1, 5, 0 ,6 ]\r\n            this.columnExpOrder[x] = Math.ceil(width / 2 + (1 - 2 * (x % 2)) * (x + 1) / 2) - 1;\r\n    }\r\n\r\n    /* \"Public\" Functions */\r\n\r\n    // MiniMax is basically a backtracking algorithm to find the optimal move\r\n    // In MiniMax, the two players are called maximizer and minimizer\r\n    // this is slower than the negamax function\r\n    // return value:\r\n    // val == 0, col == -1 ==> draw\r\n    // val == 10000, col == -1 ==> playerWon\r\n    // val == -10000, col == -1 ==> opponentWon\r\n    // col == - 2 ==> Resigned\r\n    // minimax(pos, alpha, beta, maximizingPlayer) {\r\n    //     this.nodeCount++;\r\n    //     if (this.nodeCount % 100000 === 0) console.log(this.nodeCount);\r\n    //\r\n    //     if (pos.canWinNext()) { // if Player can win\r\n    //         for (let x = 0; x < pos.width; x++) {\r\n    //             if (pos.isWinningMove(x))\r\n    //                 return {val: 10000, col: x};\r\n    //         }\r\n    //         return {val: beta, col: -1};\r\n    //     } else if (pos.opponentCanWinNext()) { // if Opponent can win\r\n    //         for (let x = 0; x < pos.width; x++) {\r\n    //             if (pos.isOpponentWinningMove(x))\r\n    //                 return {val: -10000, col: x};\r\n    //         }\r\n    //         return {val: alpha, col: -1};\r\n    //     } else if (pos.nbMoves >= pos.width * pos.height - 2) // if draw\r\n    //         return {val: 0, col: -1};\r\n    //\r\n    //     // Getting the non losing moves\r\n    //     // eslint-disable-next-line no-undef\r\n    //     let nextPossibleMove = pos.possibleNonLosingMoves();\r\n    //     // Check if there's no possible *non* losing moves\r\n    //     // opponent wins next turn\r\n    //     if (nextPossibleMove === 0n)\r\n    //         return {val: -10000, col: -1};\r\n    //\r\n    //     // Getting the already evaluated value from the hashtable\r\n    //     let key = pos.key();\r\n    //     let val = this.hashTable.get(key);\r\n    //     if (val) {\r\n    //         if (val < beta) { // upper bound\r\n    //             beta = val;\r\n    //             if (alpha >= beta) return beta;\r\n    //         } else if (alpha < beta) { // lower bound\r\n    //             alpha = val\r\n    //             if (alpha >= beta) return alpha;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // Setting up the move sorted based on the score\r\n    //     let moves = new MoveSorter(pos.width);\r\n    //     for (let i = pos.width; i--;) {\r\n    //         let move = nextPossibleMove & pos.column_mask(this.columnExpOrder[i]);\r\n    //         if (move)\r\n    //             moves.add(move, pos.moveScore(move), this.columnExpOrder[i]);\r\n    //     }\r\n    //\r\n    //     let bestColumn = 0;\r\n    //     let nextMove = moves.getNext();\r\n\r\n    //     const pos2 = pos.clone();\r\n    //\r\n    //     if (maximizingPlayer) {\r\n    //         let value = Number.NEGATIVE_INFINITY;\r\n    //         // Will loop until there's no move left in the move sorter\r\n    //         while (nextMove) {\r\n    //             // Play the move\r\n    //             pos2.play(nextMove.move);\r\n    //             let ret = this.minimax(pos2, alpha, beta, false);\r\n    //             if (ret.val > value) {\r\n    //                 value = ret.val;\r\n    //                 bestColumn = nextMove.col;\r\n    //                 this.hashTable.put(key, value);\r\n    //             }\r\n    //             alpha = Math.max(alpha, value);\r\n    //             if (alpha >= beta) {\r\n    //                 this.hashTable.put(key, alpha);\r\n    //                 break;\r\n    //             }\r\n    //             nextMove = moves.getNext();\r\n    //         }\r\n    //         return {val: value, col: bestColumn};\r\n    //     } else {\r\n    //         let value = Number.POSITIVE_INFINITY;\r\n    //         // Will loop until there's no move left in the move sorter\r\n    //         while (nextMove) {\r\n    //             // Play the move\r\n    //             pos2.play(nextMove.move);\r\n    //             let ret = this.minimax(pos2, alpha, beta, true);\r\n    //             if (ret.val < value) {\r\n    //                 value = ret.val;\r\n    //                 bestColumn = nextMove.col;\r\n    //                 this.hashTable.put(key, value);\r\n    //             }\r\n    //             beta = Math.min(beta, value);\r\n    //             if (alpha >= beta) {\r\n    //                 this.hashTable.put(key, beta);\r\n    //                 break;\r\n    //             }\r\n    //             nextMove = moves.getNext();\r\n    //         }\r\n    //         return {val: value, col: bestColumn};\r\n    //     }\r\n    // }\r\n\r\n    // Negamax is the other variant of minimax algorithm\r\n    // this negamax also use the alpha-beta pruning method\r\n    // to make the search faster\r\n    // negamax(pos, alpha, beta) {\r\n    //     this.nodeCount++;\r\n    //     let nextPossibleMove = pos.possibleNonLosingMoves();\r\n    //     // Check if there's no possible *non* losing moves\r\n    //     // opponent wins next turn\r\n    //     if (nextPossibleMove === 0n)\r\n    //         return {val: -10000, col: -1};\r\n    //\r\n    //     // Check if it's a draw\r\n    //     if (pos.nbMoves >= pos.width * pos.height - 2) return {val: 0, move: -1n};\r\n    //\r\n    //     // Search the hash table if the value already calculated\r\n    //     let key = pos.key();\r\n    //     let val = this.hashTable.get(key);\r\n    //     if (val) {\r\n    //         if (val < beta) { // upper bound\r\n    //             beta = val;\r\n    //             if (alpha >= beta) return beta;\r\n    //         } else if (alpha < beta) { // lower bound\r\n    //             alpha = val\r\n    //             if (alpha >= beta) return alpha;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     let moves = new MoveSorter(pos.width);\r\n    //     for (let i = pos.width; i--;) {\r\n    //         let move = nextPossibleMove & pos.column_mask(this.columnExpOrder[i]);\r\n    //         if (move)\r\n    //             moves.add(move, pos.moveScore(move), this.columnExpOrder[i]);\r\n    //     }\r\n    //     let nextMove = moves.getNext();\r\n    //     let value = Number.NEGATIVE_INFINITY;\r\n    //\r\n    //     let bestColumn = 0;\r\n    //     while (nextMove) {\r\n    //         const pos2 = pos.clone();\r\n    //         pos2.play(nextMove.move);\r\n    //         let score = -this.negamax(pos2, -beta, -alpha).val;\r\n    //         if (score >= value) {\r\n    //             value = score;\r\n    //             bestColumn = nextMove.col;\r\n    //             this.hashTable.put(key, value);\r\n    //         }\r\n    //         alpha = Math.max(alpha, value);\r\n    //         if (alpha >= beta) break;\r\n    //\r\n    //         nextMove = moves.getNext();\r\n    //     }\r\n    //     this.hashTable.put(key, value);\r\n    //     return {val: value, col: bestColumn}\r\n    // }\r\n\r\n    // Negamax is the other variant of minimax algorithm\r\n    // this negamax also use the alpha-beta pruning method\r\n    // to make the search faster\r\n    negamax(pos, alpha, beta) {\r\n        assert(alpha < beta);\r\n        this.nodeCount++;\r\n\r\n        if (pos.canWinNext()) { // if Player can win\r\n            for (let x = 0; x < pos.width; x++) {\r\n                if (pos.isWinningMove(x))\r\n                    return {val: pos.maxScore, col: x};\r\n            }\r\n            return {val: beta, col: -1};\r\n        } else if (pos.opponentCanWinNext()) { // if Opponent can win\r\n            for (let x = 0; x < pos.width; x++) {\r\n                if (pos.isOpponentWinningMove(x))\r\n                    return {val: pos.minScore, col: x};\r\n            }\r\n            return {val: alpha, col: -1};\r\n        }\r\n\r\n\r\n        let nextPossibleMove = pos.possibleNonLosingMoves();\r\n        // Check if there's no possible *non* losing moves\r\n        if (nextPossibleMove === 0n)\r\n            return {val: -(pos.width * pos.height - pos.nbMoves) / 2, col: -1};\r\n\r\n        // Check if it's a draw\r\n        if (pos.nbMoves >= pos.width * pos.height - 2) return {val: 0, col: -1};\r\n\r\n        // Lower bound of the search\r\n        let min = -(pos.width * pos.height - 2 - pos.nbMoves) / 2;\r\n        if (alpha < min) {\r\n            alpha = min;\r\n            // Make the search windows smaller\r\n            if (alpha >= beta) return {val: alpha, col: -1};\r\n        }\r\n\r\n        // Upper bound of the search\r\n        let max = (pos.width * pos.height - 1 - pos.nbMoves) / 2;\r\n        if (beta > max) {\r\n            beta = max;\r\n            // Make the search windows smaller\r\n            if (alpha >= beta) return {val: beta, col: -1};\r\n        }\r\n\r\n        // Search the hash table if the value already calculated\r\n        let key = pos.key();\r\n        let val = this.hashTable.get(key);\r\n        if (val) {\r\n            // Check if the pos have a lower bound\r\n            if (val > pos.maxScore - pos.minScore + 1) {\r\n                min = val + 2 * pos.minScore - pos.maxScore - 2;\r\n                if (alpha < min) {\r\n                    alpha = min;\r\n                    if (alpha >= beta) return {val: alpha, col: -1};\r\n                }\r\n            } else { // The pos have an upper bound\r\n                max = val + pos.minScore - 1;\r\n                if (beta > max) {\r\n                    beta = max;\r\n                    if (alpha >= beta) return {val: beta, col: -1};\r\n                }\r\n            }\r\n        }\r\n\r\n        let moves = new MoveSorter(pos.width);\r\n        for (let i = pos.width; i--;) {\r\n            let move = nextPossibleMove & pos.column_mask(this.columnExpOrder[i]);\r\n            if (move)\r\n                moves.add(move, pos.moveScore(move), this.columnExpOrder[i]);\r\n        }\r\n\r\n        // Computing the scores of all possible moves\r\n        // and keep the best one\r\n        let nextMove = moves.getNext();\r\n        let bestMoveCol = 0;\r\n        let value = alpha;\r\n        while (nextMove) {\r\n            const pos2 = pos.clone();\r\n            pos2.play(nextMove.move);\r\n\r\n            // calculate the score recursively\r\n            let ret = this.negamax(pos2, -beta, -alpha);\r\n            const newValue = -(ret.val);\r\n            if (newValue === -10000) return {val: newValue, col: ret.val};\r\n            // Pruning the search if we find better move\r\n            if (newValue >= value) {\r\n                value = newValue;\r\n                bestMoveCol = nextMove.col;\r\n                this.hashTable.put(key, value + pos.maxScore - 2 * pos.minScore + 2);\r\n            }\r\n            // Reducing the search windows to the new [alpha-beta]\r\n            if (value > alpha) {\r\n                alpha = value;\r\n                this.hashTable.put(key, alpha - pos.minScore + 1);\r\n            }\r\n\r\n            if (alpha >= beta) break;\r\n\r\n            // continues to the next move\r\n            nextMove = moves.getNext();\r\n        }\r\n        // Saving the upper bound for the position to the hashtable\r\n        return {val: value, col: bestMoveCol};\r\n    }\r\n\r\n    // NOT USED\r\n    // reset() {\r\n    //     this.nodeCount = 0;\r\n    //     this.hashTable = new Hashtable();\r\n    // }\r\n\r\n    // solve(pos, weak = false) {\r\n    //     this.nodeCount = 0;\r\n    //     if (weak)\r\n    //         return this.minimax(pos, 8, -1, 1, true);\r\n    //     else\r\n    //         return this.minimax(pos, 8, -pos.width * pos.height / 2, pos.width * pos.height / 2, true);\r\n    // }\r\n\r\n    solve(pos, weak = false) {\r\n        this.nodeCount = 0;\r\n        if (weak)\r\n            return this.negamax(pos, -1, 1);\r\n        else\r\n            return this.negamax(pos, -(pos.width * pos.height - 2 - pos.nbMoves) / 2, (pos.width * pos.height - 1 - pos.nbMoves) / 2);\r\n        // if (pos.canWinNext())\r\n        //     return (pos.width * pos.height + 1 - pos.nbMoves) / 2;\r\n        // let min = -pos.width * pos.height / 2;\r\n        // let max = pos.width * pos.height / 2;\r\n        // if (weak) {\r\n        //     min = -1;\r\n        //     max = 1;\r\n        // }\r\n        //\r\n        // // iteratively narrowing the min and max\r\n        // // range of the search window\r\n        // let val = 0;\r\n        // let col = 0;\r\n        // while (min < max) {\r\n        //     let med = min + (max - min) / 2;\r\n        //     if (med <= 0 && min / 2 < med)\r\n        //         med = min / 2;\r\n        //     else if (med >= 0 && max / 2 > med)\r\n        //         med = max / 2;\r\n        //     const ret = this.minimax(pos, med, med + 1, true);\r\n        //     if (ret.val <= med)\r\n        //         max = ret.val;\r\n        //     else {\r\n        //         min = ret.val;\r\n        //         val = min;\r\n        //         col = ret.col;\r\n        //     }\r\n        // }\r\n        // return {val: val, col: col};\r\n    }\r\n\r\n\r\n    /* \"Private\" Functions */\r\n}\r\n\r\nexport default Solver;\r\n","<template>\r\n  <div>\r\n    <p>\r\n      {{ instruction }}\r\n    </p>\r\n    <GameBoard\r\n        :checkers=\"checkers\"\r\n        :row-count=\"rowCount\"\r\n        :col-count=\"colCount\"\r\n        :status=\"status\"\r\n        @drop=\"drop\"\r\n        @land=\"land\"\r\n    />\r\n    <GameScoreBoard\r\n        :moves=\"moves\"\r\n        :winner=\"winner\"\r\n        :current-player=\"getCurrentPlayer\"\r\n        :status=\"status\"\r\n        @reset=\"reset\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from 'vue';\r\n\r\nimport {min, max, key} from '@/utils';\r\nimport {AI, YOU, EMPTY, PLAY, OVER} from '@/constants';\r\nimport GameBoard from '@/components/GameBoard';\r\nimport GameScoreBoard from '@/components/GameScoreBoard';\r\nimport Position from '@/AI/Position';\r\nimport Solver from '@/AI/Solver';\r\n\r\nconst WIDTH = 7;\r\nconst HEIGHT = 6;\r\n\r\nexport default {\r\n  name: 'GameContainer',\r\n  components: {\r\n    GameBoard,\r\n    GameScoreBoard\r\n  },\r\n  props: [\"firstPlayer\"],\r\n\r\n  data() {\r\n    return {\r\n      checkers: {},\r\n      isLocked: false,\r\n      rowCount: HEIGHT,\r\n      colCount: WIDTH,\r\n      status: PLAY,\r\n      currentPlayer: this.firstPlayer,\r\n      instruction: 'Click one of the columns to play!',\r\n      winner: undefined,\r\n      // AI stuff\r\n      position: new Position(WIDTH, HEIGHT),\r\n      solver: new Solver(WIDTH),\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    moves() {\r\n      return Object.values(this.checkers);\r\n    },\r\n    gameOver() {\r\n      return this.status === OVER;\r\n    },\r\n    isDraw() {\r\n      return Object.keys(this.checkers).length === this.rowCount * this.colCount;\r\n    },\r\n    getCurrentPlayer() {\r\n      return this.currentPlayer;\r\n    }\r\n  },\r\n\r\n  created() {\r\n    if (this.currentPlayer === AI) {\r\n      const ret = this.solver.solve(this.position);\r\n      // Get the column of the checkers\r\n      const colCheckers = Object.values(this.checkers)\r\n          .filter(c => c.col === ret.col)\r\n          .sort((a, b) => a.row - b.row);\r\n      // Get last available row\r\n      const lastRow = Math.max(...colCheckers.map(c => c.row).concat(-1)) + 1;\r\n      // Drop the checker\r\n      this.drop({col: ret.col, row: lastRow})\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    key,\r\n    reset() {\r\n      // Hard reset KEKW\r\n      window.history.go(0);\r\n      // this.winner = undefined;\r\n      // this.isLocked = false;\r\n      // this.status = PLAY;\r\n      // this.checkers = {};\r\n      // this.isAITurn = true;\r\n      // this.position = new Position(WIDTH, HEIGHT);\r\n      // this.solver = new Solver(WIDTH);\r\n      // const ret = this.solver.solve(this.position);\r\n      // if (ret.col === -1 && ret.val === -10000) {\r\n      //   this.resigned(this.playerColor);\r\n      // } else {\r\n      //   const colCheckers = Object.values(this.checkers)\r\n      //       .filter(c => c.col === ret.col)\r\n      //       .sort((a, b) => a.row - b.row);\r\n      //   const lastRow = Math.max(...colCheckers.map(c => c.row).concat(-1)) + 1;\r\n      //   this.drop({col:ret.col, row:lastRow})\r\n      //   this.isAITurn = false;\r\n      // }\r\n    },\r\n    toggleColor() {\r\n      if (this.currentPlayer === AI) {\r\n        this.currentPlayer = YOU;\r\n      } else {\r\n        this.currentPlayer = AI;\r\n      }\r\n    },\r\n    getChecker({row, col}) {\r\n      return this.checkers[key(row, col)] || {row, col, color: 'empty'};\r\n    },\r\n    setChecker({row, col}, attrs = {}) {\r\n      const checker = this.getChecker({row, col});\r\n      return Vue.set(this.checkers, key(row, col), {...checker, ...attrs});\r\n    },\r\n    drop({col, row}) {\r\n      if (this.isLocked) return;\r\n      this.isLocked = true;\r\n      const color = this.currentPlayer;\r\n      this.setChecker({row, col}, {color});\r\n      this.position.playCol(col);\r\n      if (!this.isDraw) this.checkForWinFrom({row, col});\r\n    },\r\n    land() {\r\n      if (this.isDraw) return this.displayDraw;\r\n      if (this.winner) {\r\n        this.displayWin(this.winner);\r\n      } else {\r\n        this.isLocked = false;\r\n        this.toggleColor();\r\n      }\r\n      if (this.currentPlayer === AI && !this.winner) {\r\n        const ret = this.solver.solve(this.position);\r\n        if (ret.val === 0 && ret.col === -1)\r\n          this.displayDraw();\r\n        else if (ret.col === -1)\r\n          this.resigned(AI);\r\n        else {\r\n          let bestColumn = ret.col;\r\n          // Ignore the forced move if the ai going to win\r\n          if (!this.position.isWinningMove(bestColumn)) {\r\n            // This loop is used to find out if the enemy can win in the next 2 turn\r\n            // and prevent that (only checks for the horizontal winning condition,\r\n            // it ignores the vertical one)\r\n            // I know this is inefficient, but at least it works.\r\n            // And it's still sub 1 second performance, so, I don't really care *shrug*.\r\n            getForcedMove:\r\n                // Simulating the next two turns\r\n                for (let x = 0; x < this.position.width; x++) {\r\n                  const pos2 = this.position.clone();\r\n                  const playedColumn = this.solver.columnExpOrder[x];\r\n                  // check if we can play in this column\r\n                  if (pos2.isPlayable(playedColumn)) {\r\n                    pos2.playCol(playedColumn);\r\n                    for (let y = 0; y < pos2.width; y++) {\r\n                      const pos3 = pos2.clone();\r\n                      const playedColumn = this.solver.columnExpOrder[y];\r\n                      // check if we can play in this column\r\n                      if (pos3.isPlayable(playedColumn)) {\r\n                        pos3.playCol(playedColumn);\r\n                        // Getting all the valid moves to prevent the opponent from winning the game\r\n                        if (pos3.opponentCanWinNext()) {\r\n                          for (let z = 0; z < pos3.width; z++) {\r\n                            if (pos3.isOpponentWinningMove(z)) {\r\n                              const move = (this.position.mask + this.position.bottom_mask_col(z)) & this.position.column_mask(z);\r\n                              // Check adjacent checker (left and right) and choose that column\r\n                              /* eslint-disable */\r\n                              if ((((this.position.current_pos ^ this.position.mask) & (move >> BigInt(this.position.height + 1)))\r\n                                  | (this.position.current_pos ^ this.position.mask) & (move << BigInt(this.position.height + 1))) !== 0n) { // Left\r\n                                if (BigInt(this.position.possible() & move) !== 0n) { // Checks if the move is possible\r\n                                  bestColumn = z;\r\n                                  break getForcedMove;\r\n                                }\r\n                              }\r\n                              /* eslint-enable */\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          }\r\n          // Get the column of the checkers\r\n          const colCheckers = Object.values(this.checkers)\r\n              .filter(c => c.col === bestColumn)\r\n              .sort((a, b) => a.row - b.row);\r\n          // Get the last available row\r\n          const lastRow = Math.max(...colCheckers.map(c => c.row).concat(-1)) + 1;\r\n          // Drop the checker\r\n          this.drop({col: bestColumn, row: lastRow})\r\n        }\r\n      }\r\n    },\r\n    getWinner(...segment) {\r\n      if (segment.length !== 4) return false;\r\n      const checkers = segment.map(([row, col]) => this.getChecker({row, col}));\r\n      const [{color}] = checkers;\r\n      if (color === EMPTY) return false;\r\n      return checkers.every(c => c.color === color) && {color, checkers};\r\n    },\r\n    checkHorizontalSegments({focalRow, minCol, maxCol}) {\r\n      let winner;\r\n      for (let row = focalRow, col = minCol; col <= maxCol; col++) {\r\n        winner = this.getWinner(\r\n            [row, col], [row, col + 1], [row, col + 2], [row, col + 3]);\r\n        if (winner) return winner;\r\n      }\r\n    },\r\n    checkVerticalSegments({focalRow, focalCol, minRow}) {\r\n      let winner;\r\n      for (let col = focalCol, row = minRow; row <= focalRow; row++) {\r\n        winner = this.getWinner(\r\n            [row, col], [row + 1, col], [row + 2, col], [row + 3, col]);\r\n        if (winner) return winner;\r\n      }\r\n    },\r\n    checkForwardSlashSegments({focalRow, focalCol, minRow, minCol, maxRow, maxCol}) {\r\n      const startForwardSlash = (row, col) => {\r\n        while (row > minRow && col > minCol) {\r\n          row--;\r\n          col--;\r\n        }\r\n        return [row, col];\r\n      };\r\n      let winner;\r\n      for (let [row, col] = startForwardSlash(focalRow, focalCol);\r\n           row <= maxRow && col <= maxCol; row++, col++) {\r\n        winner = this.getWinner(\r\n            [row, col], [row + 1, col + 1], [row + 2, col + 2], [row + 3, col + 3]);\r\n        if (winner) return winner;\r\n      }\r\n    },\r\n    checkBackwardSlashSegments({focalRow, focalCol, minRow, minCol, maxRow, maxCol}) {\r\n      const startBackwardSlash = (row, col) => {\r\n        while (row < maxRow && col > minCol) {\r\n          row++;\r\n          col--;\r\n        }\r\n        return [row, col];\r\n      };\r\n      let winner;\r\n      for (let [row, col] = startBackwardSlash(focalRow, focalCol);\r\n           row >= minRow && col <= maxCol; row--, col++) {\r\n        winner = this.getWinner(\r\n            [row, col], [row - 1, col + 1], [row - 2, col + 2], [row - 3, col + 3]);\r\n        if (winner) return winner;\r\n      }\r\n    },\r\n    checkForWinFrom(lastChecker) {\r\n      if (!lastChecker) return;\r\n      const {row: focalRow, col: focalCol} = lastChecker;\r\n      const minCol = min(focalCol);\r\n      const maxCol = max(focalCol, this.colCount - 1);\r\n      const minRow = min(focalRow);\r\n      const maxRow = max(focalRow, this.rowCount - 1);\r\n      const coords = {focalRow, focalCol, minRow, minCol, maxRow, maxCol};\r\n      this.winner = this.checkHorizontalSegments(coords) ||\r\n          this.checkVerticalSegments(coords) ||\r\n          this.checkForwardSlashSegments(coords) ||\r\n          this.checkBackwardSlashSegments(coords);\r\n    },\r\n    displayDraw() {\r\n      this.status = OVER;\r\n    },\r\n    displayWin(winner) {\r\n      this.winner = winner;\r\n      this.status = OVER;\r\n      this.winner.checkers.forEach((checker) => {\r\n        this.setChecker(checker, {isWinner: true});\r\n      });\r\n    },\r\n    resigned(player) {\r\n      this.winner = {color: player === AI ? YOU : AI};\r\n      this.status = OVER;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameContainer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameContainer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GameContainer.vue?vue&type=template&id=7c2080c4&\"\nimport script from \"./GameContainer.vue?vue&type=script&lang=js&\"\nexport * from \"./GameContainer.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <div id=\"app\">\r\n    <div class=\"logo\">\r\n      <img alt=\"Connect 4 AI\" src=\"img/logo.png\">\r\n      <h2>Connect 4 AI</h2>\r\n    </div>\r\n    <div v-if=\"isReady\" id=\"game\">\r\n      <component :is=\"gameContainerName\" v-bind=\"gameContainerProps\"/>\r\n    </div>\r\n    <div v-else>\r\n      <h3>Who gets the first turn?</h3>\r\n      <button class=\"btn\" type=\"button\" v-on:click=\"setPlayer('ai')\" style=\"margin:8px\">AI</button>\r\n      <button class=\"btn\" type=\"button\" v-on:click=\"setPlayer('you')\" style=\"margin:8px\">You</button>\r\n      <br/>\r\n      <br/>\r\n    </div>\r\n    <footer>\r\n      Connect 4 AI | Project for BINUS International Analysis of Algorithm class\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport GameContainer from \"@/components/GameContainer\";\r\nimport {AI, YOU} from '@/constants';\r\n\r\nexport default {\r\n  name: 'App',\r\n\r\n  components: {\r\n    GameContainer\r\n  },\r\n\r\n  computed: {\r\n    gameContainerName() {\r\n      return \"GameContainer\";\r\n    },\r\n    gameContainerProps() {\r\n      return {firstPlayer: this.currentPlayer};\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async update() {\r\n      this.prompt = false;\r\n      await this.$workbox.messageSW({ type: \"SKIP_WAITING\" });\r\n    },\r\n    setPlayer(player) {\r\n      if (player === \"ai\")\r\n        this.currentPlayer = AI;\r\n      else if (player === \"you\")\r\n        this.currentPlayer = YOU;\r\n      if (this.currentPlayer)\r\n        this.isReady = true;\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      currentPlayer: undefined,\r\n      isReady: false,\r\n      prompt: false\r\n    };\r\n  },\r\n\r\n  created() {\r\n    if (this.$workbox) {\r\n      this.$workbox.addEventListener(\"waiting\", () => {\r\n        this.prompt = true;\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  background-color: #121212;\r\n}\r\na {\r\n  text-decoration: none;\r\n}\r\n.logo {\r\n  display: inline-block;\r\n}\r\n.logo h3 {\r\n  margin: 0;\r\n}\r\n.btn {\r\n  background-color: #BB86FC;\r\n  border-radius: 6px;\r\n  color: #000;\r\n  padding: 12px 24px;\r\n  transition-timing-function: ease-in;\r\n  transition-property: background-color;\r\n  transition-duration: 100ms;\r\n}\r\n.btn:hover {\r\n  background-color: #C89EFC;\r\n}\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: center;\r\n  color: #e6e6e7;\r\n  margin-top: 60px;\r\n}\r\n</style>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=8dcf463e&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport wb from './registerServiceWorker';\r\n\r\nVue.config.productionTip = false\r\nVue.prototype.$workbox = wb;\r\nnew Vue({\r\n  render: h => h(App),\r\n}).$mount('#app')\r\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameColumns.vue?vue&type=style&index=0&id=baae8a6a&scoped=true&lang=css&\""],"sourceRoot":""}